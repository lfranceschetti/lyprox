"""
Django settings for lymph_interface project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import json
import warnings


try:
    with open("/etc/lymph-interface_config.json") as config_file:
        config = json.load(config_file)
except FileNotFoundError:
    warnings.warn(
        "No config file found under '/etc/lymph-iterface_config.json'. This is "
        "fine for development, as default values will be loaded, but make sure "
        "to provide this config file for production.",
        RuntimeWarning
    )
    config = {
        "DEBUG": True,
        "LOG_LEVEL": "INFO",
        "ALLOWED_HOSTS": [],
        "SECRET_KEY": 'k_&(m5ymps%p=4&qjnwkv-avxb@@ez1tewc8g_eg4k#jx59ukx'
    }
    

# security
DEBUG = config["DEBUG"]
SECRET_KEY = config["SECRET_KEY"]
ALLOWED_HOSTS = config["ALLOWED_HOSTS"]
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

FILE_UPLOAD_TEMP_DIR = BASE_DIR / "tmp"

LOGIN_REDIRECT_URL = "/"


# Logging
def set_LOGGING(LOG_LEVEL):
    LOGGING = {
        'version': 1,
        'disanle_existing_loggers': False,

        'formatters': {
            'default': {
                'format': "[%(asctime)s] %(levelname)-10s %(name)-40s %(message)s"
            }
        },

        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'default',
            },
            'file': {
                'class': 'logging.FileHandler',
                'filename': BASE_DIR / 'debug.log',
                'formatter': 'default'
            }
        },

        'loggers': {
            'django': {
                'level': LOG_LEVEL,
                'handlers': ['console', 'file']
            },
            'patients': {
                'level': LOG_LEVEL,
                'handlers': ['console', 'file']
            },
            'accounts': {
                'level': LOG_LEVEL,
                'handlers': ['console', 'file']
            },
            'auth_logger': {
                'level': LOG_LEVEL,
                'handlers': ['console', 'file']
            }
        }
    }
    return LOGGING

LOG_LEVEL = config["LOG_LEVEL"]
LOGGING = set_LOGGING(LOG_LEVEL)


# Application definition

INSTALLED_APPS = [
    # my apps
    "accounts.apps.AccountsConfig",
    "patients.apps.PatientsConfig",

    # third party apps
    "django_filters",
    "auth_logger",

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lymph_interface.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "lymph_interface" / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lymph_interface.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATICFILES_DIRS = [
    BASE_DIR / "lymph_interface" / "static"
]

try:
    STATIC_ROOT = BASE_DIR / config["STATIC_ROOT_SUFFIX"]
except KeyError:
    pass

STATIC_URL = '/static/'